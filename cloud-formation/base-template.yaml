Parameters:
  InstanceType:
    Description: WebServer EC2 instance type (has default, AllowedValues)
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  MyVPC:
    Description: VPC to operate in
    Type: AWS::EC2::VPC::Id

  MySubnetID:
    Description: Subnet IDs that is a List of Subnet Id
    Type: "AWS::EC2::Subnet::Id"

  NetworkUsername:
    Description: Network username
    Type: String
    Default: NTABORD

  env:
    Description: Environment
    Type: String
    AllowedValues: [DEV, PDN]

  TemplateURL:
    Description: URL of the nested stack template
    Type: String
    Default: https://cf-templates-ixehohauydzv-us-east-1.s3.us-east-1.amazonaws.com/sg-template.yaml

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

Conditions:
  IsPDN: !Equals [!Ref env, "PDN"]
  IsDEV: !Equals [!Ref env, "DEV"]

Resources:

  ServerSecurityGroupStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref TemplateURL
      Parameters:
        ApplicationName: !Ref AWS::StackName
        VPCId: !Ref MyVPC
      TimeoutInMinutes: 5

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "LDC-AUTH-ALB-${NetworkUsername}-${env}"
      Subnets: !Ref Subnets
      SecurityGroups: 
        - !GetAtt ServerSecurityGroupStack.Outputs.SSHGroupId
      Scheme: internet-facing
      Type: application

  TargetGroupPDN:
    Condition: IsPDN
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  TargetGroupDEV:
    Condition: IsDEV
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref MyEC2Instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !If
            - IsPDN
            - !Ref TargetGroupPDN
            - !Ref TargetGroupDEV

  LaunchTemplate:
    Condition: IsPDN
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: ami-0a7d80731ae1b2435
        SecurityGroupIds: 
          - !GetAtt ServerSecurityGroupStack.Outputs.SSHGroupId

  AutoScalingGroup:
    Condition: IsPDN
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: "1"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref TargetGroupPDN

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Condition: IsDEV
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-0a7d80731ae1b2435
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            VolumeSize: "20"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !GetAtt ServerSecurityGroupStack.Outputs.SSHGroupId
          SubnetId: !Ref MySubnetID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /var/log/user-data.log 2>&1
          echo "=== INICIANDO SCRIPT DE USUARIO ==="
          # Actualiza el sistema
          apt-get update -y
          apt-get upgrade -y
          # Instala Docker correctamente
          curl -fsSL https://get.docker.com/ -o get-docker.sh
          sh get-docker.sh

          # Agrega el usuario ubuntu al grupo docker
          usermod -aG docker ubuntu
          # Prueba simple para verificar que Docker está disponible
          docker --version || echo "Docker no se instaló correctamente"

          apt-get install -y git
          cd /home/ubuntu
          git clone https://github.com/nastab/cloudformation-challenge.git
          cd cloudformation-challenge
          docker compose up -d
          echo "=== FIN DEL SCRIPT DE USUARIO ==="
      Tags:
        - Key: Name
          Value: !Sub "AUTH-EC2-NET-${NetworkUsername}-${env}"
